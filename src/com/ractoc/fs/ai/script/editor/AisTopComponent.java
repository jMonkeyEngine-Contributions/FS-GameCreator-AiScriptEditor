/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ractoc.fs.ai.script.editor;

import com.ractoc.fs.ai.AiScript;
import com.ractoc.fs.ai.script.editor.filetype.AisDataObject;
import java.io.IOException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileUtil;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.CloneableTopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.ractoc.fs.ai.script.editor//Ais//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "AisTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.ractoc.fs.ai.script.editor.AisTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_AisAction",
        preferredID = "AisTopComponent")
@Messages({
    "CTL_AisAction=Ais",
    "CTL_AisTopComponent=Ais Window",
    "HINT_AisTopComponent=This is a Ais window"
})
public final class AisTopComponent extends CloneableTopComponent {

    public static final String PROP_FILENAME = "filename";
    private AisDataObject dataObject;
    private AiScript script;

    public AisTopComponent() {
        System.out.println("AisTopComponent");
        initComponents();
        setName(Bundle.CTL_AisTopComponent());
        setToolTipText(Bundle.HINT_AisTopComponent());

    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    void writeProperties(java.util.Properties p) throws IOException {
        p.setProperty(PROP_FILENAME, FileUtil.toFile(dataObject.getPrimaryFile()).getCanonicalPath());
    }

    void readProperties(java.util.Properties p) throws IOException {
        String fileName = p.getProperty(PROP_FILENAME);
    }

    public void setAisDataObject(AisDataObject dataObject) {
        this.dataObject = dataObject;
        this.setActivatedNodes(new Node[]{dataObject.getNodeDelegate()});
        loadScript();
        setupEditorPanel();
    }

    private void loadScript() {
        script = (AiScript) dataObject.loadAsset();
    }

    private void setupEditorPanel() {
        setDisplayName(script.getName());
    }
}
